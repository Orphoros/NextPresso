package nextpresso.client.UI;

import javax.swing.*;
import java.awt.*;
import java.util.ArrayList;

/**
 * Sets up and creates the Java GUI
 */
public class MainPane extends JFrame {
    private JMenu serverMenu;
    public JMenuItem connectMenuItem, disconnectMenuItem, joinGroupMenuItem, leaveGroupMenuItem, createGroup;
    public final JTabbedPane chatInputSelector = new JTabbedPane();
    public JPanel chatPanel, statusIndicator, statusPanel, broadcastTab, groupMessageTab, directMessageTab;
    public JScrollPane scrollView;
    public JTextArea chatView;
    public JTextField broadcastMessage, groupMessage, directMessage;
    public JButton broadcastSend, groupSend, directSend, directUpload;
    public JComboBox<String> groupSelector, userSelector;
    public JLabel statusMessage, usernameLabel;
    public JCheckBox encryptCheckbox;
    public String username;

    public ArrayList<String> groups, users;
    private final GUILogic logic;


    /**
     * Initializes the GUI panel. Should be called by the {@link GUILogic} class
     * @param logic An instance of {@link GUILogic}
     */
    public MainPane(GUILogic logic) {
        this.logic = logic;
        this.groups = new ArrayList<>();
        this.groups.add("Not connected");
        this.users = new ArrayList<>();
        this.users.add("Not connected");
        this.setTitle("Mocha - NextPresso Client");
        this.setDefaultCloseOperation(EXIT_ON_CLOSE);
        this.setResizable(false);

        initChatView();
        initScrollView();
        initBroadcastTab();
        initGroupMessageTab();
        initDirectMessageTab();
        initStatusMessage();
        initStatusIndicator();
        initUsernameLabel();
        initStatusPanel();
        initChatPanel();
        getContentPane().add(chatPanel, BorderLayout.PAGE_END);
        initTopBar();
        pack();
        setVisible(true);
    }

    /**
     * Generated by NetBeans, adapted for readability
     */
    private void initChatView() {
        chatView = new JTextArea();
        chatView.setEditable(false);
        chatView.setColumns(20);
        chatView.setLineWrap(true);
        chatView.setRows(5);
        chatView.setFocusable(false);
    }

    /**
     * Generated by NetBeans, adapted for readability
     */
    private void initScrollView(){
        scrollView = new JScrollPane();
        scrollView.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        scrollView.setAutoscrolls(true);
        scrollView.setViewportView(chatView);
    }

    /**
     * Generated by NetBeans, adapted for readability
     */
    private void initBroadcastTab(){
        broadcastSend = new JButton();
        broadcastMessage = new JTextField();
        broadcastTab = new JPanel();

        broadcastSend.addActionListener(e -> logic.handleConnect());
        broadcastSend.setText("Send");

        GroupLayout broadcastTabLayout = new GroupLayout(broadcastTab);
        broadcastTab.setLayout(broadcastTabLayout);
        broadcastTabLayout.setHorizontalGroup(
                broadcastTabLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(broadcastTabLayout.createSequentialGroup()
                                .addComponent(broadcastMessage, GroupLayout.PREFERRED_SIZE, 462, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(broadcastSend, GroupLayout.PREFERRED_SIZE, 70, GroupLayout.PREFERRED_SIZE))
        );
        broadcastTabLayout.setVerticalGroup(
                broadcastTabLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(broadcastTabLayout.createSequentialGroup()
                                .addGroup(broadcastTabLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(broadcastMessage, GroupLayout.PREFERRED_SIZE, 33, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(broadcastSend, GroupLayout.PREFERRED_SIZE, 33, GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(42, Short.MAX_VALUE))
        );
        chatInputSelector.addTab("Everyone", broadcastTab);
    }

    /**
     * Generated by NetBeans, adapted for readability
     */
    private void initGroupMessageTab(){
        groupMessage = new JTextField();
        groupSelector = new JComboBox<>();
        groupSend = new JButton();
        groupMessageTab = new JPanel();

        groupSend.setText("Send");
        groupSend.addActionListener(e -> logic.handleConnect());

        groupSelector.setEditable(false);
        groupSelector.setModel(new DefaultComboBoxModel<>(groups.toArray(new String[0])));

        GroupLayout groupMessageTabLayout = new GroupLayout(groupMessageTab);
        groupMessageTab.setLayout(groupMessageTabLayout);
        groupMessageTabLayout.setHorizontalGroup(
                groupMessageTabLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(GroupLayout.Alignment.TRAILING, groupMessageTabLayout.createSequentialGroup()
                                .addGroup(groupMessageTabLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addComponent(groupSelector, GroupLayout.PREFERRED_SIZE, 266, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(groupMessage, GroupLayout.PREFERRED_SIZE, 461, GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(groupSend, GroupLayout.PREFERRED_SIZE, 70, GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1))
        );
        groupMessageTabLayout.setVerticalGroup(
                groupMessageTabLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(groupMessageTabLayout.createSequentialGroup()
                                .addGroup(groupMessageTabLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                        .addComponent(groupSend, GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                                        .addComponent(groupMessage))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(groupSelector, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        chatInputSelector.addTab("Group", groupMessageTab);
    }

    /**
     * Generated by NetBeans, adapted for readability
     */
    private void initDirectMessageTab(){
        directMessage = new JTextField();
        directSend = new JButton();
        directUpload = new JButton();
        userSelector = new JComboBox<>();
        directMessageTab = new JPanel();

        directUpload.setText("Share");
        directUpload.addActionListener(e->logic.handleConnect());

        directSend.setText("Send");
        directSend.addActionListener(e -> logic.handleConnect());

        userSelector.setEditable(false);
        userSelector.setModel(new DefaultComboBoxModel<>(users.toArray(new String[0])));

        encryptCheckbox = new JCheckBox();
        encryptCheckbox.setText("Encrypt");

        GroupLayout directMessageTabLayout = new GroupLayout(directMessageTab);
        directMessageTab.setLayout(directMessageTabLayout);
        directMessageTabLayout.setHorizontalGroup(
                directMessageTabLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(GroupLayout.Alignment.TRAILING, directMessageTabLayout.createSequentialGroup()
                                .addGroup(directMessageTabLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addComponent(directMessage, GroupLayout.PREFERRED_SIZE, 461, GroupLayout.PREFERRED_SIZE)
                                        .addGroup(directMessageTabLayout.createSequentialGroup()
                                                .addComponent(userSelector, GroupLayout.PREFERRED_SIZE, 266, GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 118, Short.MAX_VALUE)
                                                .addComponent(encryptCheckbox, GroupLayout.PREFERRED_SIZE, 81, GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(directMessageTabLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addComponent(directUpload)
                                        .addComponent(directSend, GroupLayout.PREFERRED_SIZE, 70, GroupLayout.PREFERRED_SIZE)))
        );
        directMessageTabLayout.setVerticalGroup(
                directMessageTabLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(directMessageTabLayout.createSequentialGroup()
                                .addGroup(directMessageTabLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                        .addComponent(directSend, GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                                        .addComponent(directMessage))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(directMessageTabLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(directUpload, GroupLayout.PREFERRED_SIZE, 33, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(userSelector, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(encryptCheckbox))
                                .addContainerGap())
        );

        chatInputSelector.addTab("DM", directMessageTab);
    }

    /**
     * Generated by NetBeans, adapted for readability
     */
    private void initStatusPanel() {
        statusPanel = new JPanel();
        GroupLayout statusPanelLayout = new GroupLayout(statusPanel);
        statusPanel.setBorder(BorderFactory.createLineBorder(null));
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
                statusPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(statusPanelLayout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(statusIndicator, GroupLayout.PREFERRED_SIZE, 23, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(statusMessage)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(usernameLabel))
        );
        statusPanelLayout.setVerticalGroup(
                statusPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(statusPanelLayout.createSequentialGroup()
                                .addComponent(usernameLabel, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                        .addComponent(statusIndicator, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(statusMessage, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }

    /**
     * Generated by NetBeans, adapted for readability
     */
    private void initStatusMessage() {
        statusMessage = new JLabel();
        statusMessage.setText("Disconnected");
    }

    /**
     * Generated by NetBeans, adapted for readability
     */
    private void initStatusIndicator() {
        statusIndicator = new JPanel();
        statusIndicator.setBackground(new Color(85, 85, 85));
    }

    /**
     * Generated by NetBeans, adapted for readability
     */
    private void initUsernameLabel() {
        usernameLabel = new JLabel();
        usernameLabel.setHorizontalAlignment(SwingConstants.TRAILING);
        usernameLabel.setText("Logged out");
    }

    /**
     * Generated by NetBeans, adapted for readability
     */
    private void initChatPanel(){
        chatPanel = new JPanel();
        GroupLayout chatPanelLayout = new GroupLayout(chatPanel);
        chatPanel.setLayout(chatPanelLayout);
        chatPanelLayout.setHorizontalGroup(
                chatPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(scrollView)
                        .addGroup(chatPanelLayout.createSequentialGroup()
                                .addComponent(statusPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(2, 2, 2))
                        .addComponent(chatInputSelector, GroupLayout.Alignment.TRAILING)
        );
        chatPanelLayout.setVerticalGroup(
                chatPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(chatPanelLayout.createSequentialGroup()
                                .addComponent(scrollView, GroupLayout.PREFERRED_SIZE, 264, GroupLayout.PREFERRED_SIZE)
                                .addGap(11, 11, 11)
                                .addComponent(chatInputSelector, GroupLayout.PREFERRED_SIZE, 105, GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(statusPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addGap(15, 15, 15))
        );
    }

    /**
     * Generated by NetBeans, adapted for readability
     */
    private void initTopBar(){
        JMenuBar topBar = new JMenuBar();

        JMenu clientMenu = new JMenu();
        clientMenu.setText("Mocha");

        serverMenu = new JMenu();
        serverMenu.setText("Server");
        serverMenu.setVisible(false); //Invisible until connected

        connectMenuItem = new JMenuItem(); //Invisible when connected
        connectMenuItem.setText("Connect...");
        connectMenuItem.addActionListener(e-> logic.handleConnect());
        clientMenu.add(connectMenuItem);

        disconnectMenuItem = new JMenuItem();
        disconnectMenuItem.setText("Disconnect");
        disconnectMenuItem.addActionListener(e-> logic.handleDisconnect());
        disconnectMenuItem.setVisible(false); //Invisible until connected
        clientMenu.add(disconnectMenuItem);

        JMenuItem aboutMenuItem = new JMenuItem();
        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(e->ShowDialog.aboutDialog());
        clientMenu.add(aboutMenuItem);

        topBar.add(clientMenu);

        joinGroupMenuItem = new JMenuItem();
        joinGroupMenuItem.setText("Join group...");
        joinGroupMenuItem.addActionListener(e -> logic.leaveJoinGroup(false));
        serverMenu.add(joinGroupMenuItem);

        leaveGroupMenuItem = new JMenuItem();
        leaveGroupMenuItem.setText("Leave group...");
        leaveGroupMenuItem.addActionListener(e -> logic.leaveJoinGroup(true));
        serverMenu.add(leaveGroupMenuItem);

        createGroup = new JMenuItem();
        createGroup.setText("Create group...");
        createGroup.addActionListener(e -> logic.createGroup());
        serverMenu.add(createGroup);

        topBar.add(serverMenu);

        this.setJMenuBar(topBar);
    }

    /**
     * Update interface elements to reflect a successful connection
     * @param username The username to be displayed on the interface
     * @param legacy Boolean to indicate whether the connection was made to a legacy server
     */
    public void frontendUpdateOnConnection(String username, boolean legacy){
        //Update UI
        this.username = username;
        String message = "Logged in as: "+username;
        System.out.println("Logged in!");
        statusIndicator.setBackground(new Color(55, 136, 5));
        if (legacy) {
            statusMessage.setText("Connected - Legacy server");
            chatInputSelector.remove(groupMessageTab);
            chatInputSelector.remove(directMessageTab);
        }
        else {
            statusMessage.setText("Connected");
            serverMenu.setVisible(true);
        }
        usernameLabel.setText(message);
        chatView.append("[MOCHA] "+message+"\n");
        toggleSendListeners(true);
        connectMenuItem.setVisible(false);
        disconnectMenuItem.setVisible(true);
    }

    /**
     * Update interface elements to reflect a disconnected state
     */
    public void updateUIOnDisconnect(){
        users.clear();
        users.add("Not connected");
        groups.clear();
        groups.add("Not connected");
        usernameLabel.setText("Logged out");
        toggleSendListeners(false);
        connectMenuItem.setVisible(true);
        disconnectMenuItem.setVisible(false);
        serverMenu.setVisible(false);
        if (chatInputSelector.indexOfComponent(groupMessageTab) == -1) chatInputSelector.addTab("Group", groupMessageTab);
        if (chatInputSelector.indexOfComponent(directMessageTab) == -1) chatInputSelector.addTab("DM", directMessageTab);
    }

    /**
     * Display an error string in the interface
     * @param error The error text to be displayed
     */
    public void displayError(String error){
        statusMessage.setText(error);
        statusIndicator.setBackground(new Color(255, 0, 0));
    }

    /**
     * Action listeners
     */
    private void toggleSendListeners(boolean isConnected){
        if (isConnected){
            chatInputSelector.addChangeListener(e -> logic.handleTabSwitch());
            broadcastSend.removeActionListener(broadcastSend.getActionListeners()[0]);
            broadcastSend.addActionListener(e -> logic.sendBroadcastMessage());
            groupSend.removeActionListener(groupSend.getActionListeners()[0]);
            groupSend.addActionListener(e -> logic.sendGroupMessage());
            directSend.removeActionListener(directSend.getActionListeners()[0]);
            directSend.addActionListener(e -> logic.sendDirectMessage());
            directUpload.removeActionListener(directUpload.getActionListeners()[0]);
            directUpload.addActionListener(e -> logic.sendFileUploadRequest());
        } else {
            chatInputSelector.removeChangeListener(chatInputSelector.getChangeListeners()[0]);
            broadcastSend.removeActionListener(broadcastSend.getActionListeners()[0]);
            broadcastSend.addActionListener(e -> logic.handleConnect());
            groupSend.removeActionListener(groupSend.getActionListeners()[0]);
            groupSend.addActionListener(e -> logic.handleConnect());
            directSend.removeActionListener(directSend.getActionListeners()[0]);
            directSend.addActionListener(e -> logic.handleConnect());
            directUpload.removeActionListener(directUpload.getActionListeners()[0]);
            directUpload.addActionListener(e -> logic.handleConnect());
        }
    }

}